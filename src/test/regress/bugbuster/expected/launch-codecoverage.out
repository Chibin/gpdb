\! psql -d template1 -f 'sql/codecoverage.sql' > data/codecoverage.txt
createdb: database creation failed: ERROR:  source database "template1" is being accessed by other users
createdb: database creation failed: ERROR:  source database "template1" is being accessed by other users
createdb: database creation failed: ERROR:  source database "template1" is being accessed by other users
sh: -c: line 0: unexpected EOF while looking for matching `''
sh: -c: line 1: syntax error: unexpected end of file
createdb: "UUTT" is not a valid encoding name
createdb: option requires an argument -- E
Try "createdb --help" for more information.
dropdb: database removal failed: ERROR:  database "jsoedomo" does not exist
dropdb: database removal failed: ERROR:  database "jsoedomo" does not exist
dropdb: database removal failed: ERROR:  database "jsoedomo2" does not exist
dropdb: database removal failed: ERROR:  database "jsoedomo3" does not exist
dropdb: invalid option -- E
Try "dropdb --help" for more information.
psql: FATAL:  no pg_hba.conf entry for host "[local]", user "xxx", database "template1", SSL off
psql:sql/largeobject.sql:4: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'name' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/largeobject.sql:4: ERROR:  relation "image" already exists
psql:sql/largeobject.sql:6: ERROR:  duplicate key violates unique constraint "pg_largeobject_loid_pn_index"
psql:sql/largeobject.sql:19: ERROR:  could not open server file "data/greenplum_logo.gif": No such file or directory
psql:sql/largeobject.sql:21: ERROR:  large object 222397 does not exist  (seg0 usenjaltarmbp:18506 pid=17096)
psql:sql/optquery.sql:3: ERROR:  relation "subselect_tbl1" does not exist
LINE 1: SELECT '' AS two, f1 AS "Constant Select" FROM SUBSELECT_TBL...
                                                       ^
psql:sql/triggers.sql:5: NOTICE:  drop cascades to function triggers_code.trigtest()
psql:sql/triggers.sql:5: NOTICE:  drop cascades to function triggers_code.trigger_func()
psql:sql/triggers.sql:5: NOTICE:  drop cascades to trigger before_upd_row_trig on table triggers_code.main_table
psql:sql/triggers.sql:5: NOTICE:  drop cascades to trigger before_upd_stmt_trig on table triggers_code.main_table
psql:sql/triggers.sql:5: NOTICE:  drop cascades to trigger after_ins_stmt_trig on table triggers_code.main_table
psql:sql/triggers.sql:5: NOTICE:  drop cascades to trigger before_ins_stmt_trig on table triggers_code.main_table
psql:sql/triggers.sql:5: NOTICE:  drop cascades to table triggers_code.main_table
psql:sql/triggers.sql:5: NOTICE:  drop cascades to table triggers_code.log_table
psql:sql/triggers.sql:10: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'pkey1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:11: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'fkey1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:12: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'fkey21' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:50: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
psql:sql/triggers.sql:51: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
psql:sql/triggers.sql:99: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'price_id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:122: ERROR:  function set_ttdummy(integer) does not exist
LINE 1: select set_ttdummy(0);
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
psql:sql/triggers.sql:130: ERROR:  function set_ttdummy(integer) does not exist
LINE 1: select set_ttdummy(1);
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
psql:sql/triggers.sql:136: ERROR:  function set_ttdummy(integer) does not exist
LINE 1: select set_ttdummy(0);
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
psql:sql/triggers.sql:150: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tstamp' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:152: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:184: NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:184: NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:186: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
psql:sql/triggers.sql:188: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:194: NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:200: NOTICE:  CREATE TABLE will create implicit sequence "trigtest_i_seq" for serial column "trigtest.i"
psql:sql/triggers.sql:200: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "trigtest_pkey" for table "trigtest"
psql:sql/triggers.sql:202: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:202: WARNING:  Referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced.
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT BEFORE ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT AFTER ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:219: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT BEFORE STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT AFTER ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:221: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:225: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:225: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg2 usenjaltarmbp:18508 pid=17229)
psql:sql/triggers.sql:225: NOTICE:  trigtest INSERT AFTER STATEMENT  (seg1 usenjaltarmbp:18507 pid=17228)
psql:sql/triggers.sql:228: NOTICE:  trigtest DELETE AFTER STATEMENT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:244: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:302: NOTICE:  TG_NAME: show_trigger_data_trig  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_WHEN: BEFORE  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_LEVEL: ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_OP: INSERT  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_RELID::regclass: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_RELNAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_TABLE_NAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_TABLE_SCHEMA: triggers_code  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_NARGS: 2  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  TG_ARGV: [23, skidoo]  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:302: NOTICE:  NEW: (1,insert)  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_NAME: show_trigger_data_trig  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_WHEN: BEFORE  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_LEVEL: ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_OP: UPDATE  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_RELID::regclass: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_RELNAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_TABLE_NAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_TABLE_SCHEMA: triggers_code  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_NARGS: 2  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  TG_ARGV: [23, skidoo]  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  OLD: (1,insert)  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:303: NOTICE:  NEW: (1,update)  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_NAME: show_trigger_data_trig  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_WHEN: BEFORE  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_LEVEL: ROW  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_OP: DELETE  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_RELID::regclass: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_RELNAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_TABLE_NAME: trigger_test  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_TABLE_SCHEMA: triggers_code  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_NARGS: 2  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  TG_ARGV: [23, skidoo]  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:304: NOTICE:  OLD: (1,update)  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:316: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:sql/triggers.sql:336: NOTICE:  row 1 not changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:336: NOTICE:  row 2 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:337: NOTICE:  row 1 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:337: NOTICE:  row 2 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:339: NOTICE:  row 1 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:339: NOTICE:  row 2 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:352: NOTICE:  row 1 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:352: NOTICE:  row 2 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:353: NOTICE:  row 1 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:353: NOTICE:  row 2 changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:354: NOTICE:  row 1 not changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/triggers.sql:354: NOTICE:  row 2 not changed  (seg0 usenjaltarmbp:18506 pid=17227)
psql:sql/mpp-11333.sql:17: NOTICE:  1  (seg0 usenjaltarmbp:18506 pid=17236)
\! grep -i "ERROR" data/codecoverage.txt 
