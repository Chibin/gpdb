-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test CursorLostUpdate for: READ UNCOMMITTED--
--  P4C Cursor Lost Update:
--
--  rc1[x]...w2[x]...w1[x]...c1
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
NOTICE:  table "visi" does not exist, skipping
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL READ UNCOMMITTED;
DECLARE curs CURSOR FOR SELECT * FROM visi;
FETCH ALL FROM curs;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

UPDATE visi SET b=4 where b=1;
COMMIT;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 4
 2 | 2
(2 rows)

-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test CursorLostUpdate for: READ COMMITTED--
--  P4C Cursor Lost Update:
--
--  rc1[x]...w2[x]...w1[x]...c1
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL READ COMMITTED;
DECLARE curs CURSOR FOR SELECT * FROM visi;
FETCH ALL FROM curs;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

BEGIN ISOLATION LEVEL READ COMMITTED;
WARNING:  there is already a transaction in progress
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

UPDATE visi SET b=4 where b=1;
COMMIT;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 4
 2 | 2
(2 rows)

-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test CursorLostUpdate for: REPEATABLE READ--
--  P4C Cursor Lost Update:
--
--  rc1[x]...w2[x]...w1[x]...c1
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL REPEATABLE READ;
ERROR:  Greenplum Database does not support REPEATABLE READ transactions. (variable.c:593)
DECLARE curs CURSOR FOR SELECT * FROM visi;
ERROR:  DECLARE CURSOR may only be used in transaction blocks
FETCH ALL FROM curs;
ERROR:  cursor "curs" does not exist
BEGIN ISOLATION LEVEL REPEATABLE READ;
ERROR:  Greenplum Database does not support REPEATABLE READ transactions. (variable.c:593)
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

UPDATE visi SET b=4 where b=1;
COMMIT;
WARNING:  there is no transaction in progress
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 4
 2 | 2
(2 rows)

-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test CursorLostUpdate for: SERIALIZABLE--
--  P4C Cursor Lost Update:
--
--  rc1[x]...w2[x]...w1[x]...c1
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL SERIALIZABLE;
DECLARE curs CURSOR FOR SELECT * FROM visi;
FETCH ALL FROM curs;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

UPDATE visi SET b=4 where b=1;
COMMIT;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 4
 2 | 2
(2 rows)

-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test FuzzyReads for: READ UNCOMMITTED--
--  P2 (Non-repeatable or Fuzzy Read): Transaction T1
--  reads a data item.  Another transaction T2 then modifies or
--  deletes that data item and commits.  If T1 then attempts to
--  reread the data item, it receives a modified value or discovers
--  that the data item has been deleted.
--
--  r1[x]...w2[x]...(c1 or a1)
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL READ UNCOMMITTED;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

DELETE FROM visi where a = 1;
COMMIT;
-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test FuzzyReads for: READ COMMITTED--
--  P2 (Non-repeatable or Fuzzy Read): Transaction T1
--  reads a data item.  Another transaction T2 then modifies or
--  deletes that data item and commits.  If T1 then attempts to
--  reread the data item, it receives a modified value or discovers
--  that the data item has been deleted.
--
--  r1[x]...w2[x]...(c1 or a1)
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL READ COMMITTED;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

DELETE FROM visi where a = 1;
COMMIT;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 2 | 2
(1 row)

-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test FuzzyReads for: REPEATABLE READ--
--  P2 (Non-repeatable or Fuzzy Read): Transaction T1
--  reads a data item.  Another transaction T2 then modifies or
--  deletes that data item and commits.  If T1 then attempts to
--  reread the data item, it receives a modified value or discovers
--  that the data item has been deleted.
--
--  r1[x]...w2[x]...(c1 or a1)
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL REPEATABLE READ;
ERROR:  Greenplum Database does not support REPEATABLE READ transactions. (variable.c:593)
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 1 | 1
 2 | 2
(2 rows)

DELETE FROM visi where a = 1;
COMMIT;
WARNING:  there is no transaction in progress
-- start_matchsubs
-- m/variable\.c/
-- s/variable\.c:(\d)+/SOMEFUNC:SOMELINE/
-- end_matchsubs
-------------------------------------- Test FuzzyReads for: SERIALIZABLE--
--  P2 (Non-repeatable or Fuzzy Read): Transaction T1
--  reads a data item.  Another transaction T2 then modifies or
--  deletes that data item and commits.  If T1 then attempts to
--  reread the data item, it receives a modified value or discovers
--  that the data item has been deleted.
--
--  r1[x]...w2[x]...(c1 or a1)
------------------------------------
-- setup visi table
DROP TABLE IF EXISTS visi;
CREATE TABLE visi (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO visi VALUES (1,1);
INSERT INTO visi VALUES (2,2);
BEGIN ISOLATION LEVEL SERIALIZABLE;
DELETE FROM visi where a = 1;
COMMIT;
SELECT * FROM visi ORDER BY 1,2;
 a | b 
---+---
 2 | 2
(1 row)

BEGIN ISOLATION LEVEL SERIALIZABLE;
UPDATE visi set b=3 where b=2;
COMMIT;
