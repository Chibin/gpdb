--
-- Nested loop join with index scan on CO table, test for MPP-17658
--
create schema co_nestloop_idxscan;
create table co_nestloop_idxscan.foo (id bigint, data text) with (appendonly=true, orientation=column)
distributed by (id);
create table co_nestloop_idxscan.bar (id bigint) distributed by (id);
-- Changing the text to be smaller doesn't repro the issue
insert into co_nestloop_idxscan.foo select 1, repeat('xxxxxxxxxx', 100000);
insert into co_nestloop_idxscan.bar values (1);
create index foo_id_idx on co_nestloop_idxscan.foo(id);
-- test with hash join
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..862.55 rows=1 width=8)
   ->  Hash Join  (cost=0.00..862.55 rows=1 width=8)
         Hash Cond: foo.id = bar.id
         ->  Table Scan on foo  (cost=0.00..431.55 rows=1 width=8)
         ->  Hash  (cost=431.00..431.00 rows=1 width=8)
               ->  Table Scan on bar  (cost=0.00..431.00 rows=1 width=8)
 Settings:  optimizer=on
 Optimizer status: PQO version 1.597
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

-- test with nested loop join
select disable_xform('CXformInnerJoin2HashJoin');
            disable_xform             
--------------------------------------
 CXformInnerJoin2HashJoin is disabled
(1 row)

set enable_hashjoin=off;
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1324595.98 rows=1 width=8)
   ->  Nested Loop  (cost=0.00..1324595.98 rows=1 width=8)
         Join Filter: foo.id = bar.id
         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.55 rows=1 width=8)
               ->  Table Scan on foo  (cost=0.00..431.55 rows=1 width=8)
         ->  Table Scan on bar  (cost=0.00..431.00 rows=1 width=8)
 Settings:  enable_hashjoin=off; optimizer=on
 Optimizer status: PQO version 1.597
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

-- test with nested loop join and index scan
set enable_seqscan = off;
-- start_ignore
-- Known_opt_diff: OPT-929
-- end_ignore
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1324595.98 rows=1 width=8)
   ->  Nested Loop  (cost=0.00..1324595.98 rows=1 width=8)
         Join Filter: foo.id = bar.id
         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.55 rows=1 width=8)
               ->  Table Scan on foo  (cost=0.00..431.55 rows=1 width=8)
         ->  Table Scan on bar  (cost=0.00..431.00 rows=1 width=8)
 Settings:  enable_hashjoin=off; enable_seqscan=off; optimizer=on
 Optimizer status: PQO version 1.597
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

select enable_xform('CXformInnerJoin2HashJoin');
            enable_xform             
-------------------------------------
 CXformInnerJoin2HashJoin is enabled
(1 row)

drop schema co_nestloop_idxscan cascade;
NOTICE:  drop cascades to table co_nestloop_idxscan.bar
NOTICE:  drop cascades to append only columnar table co_nestloop_idxscan.foo
